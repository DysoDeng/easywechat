{"version":3,"file":"8662.app.js","mappings":";;;;;;;;;;;;AAAO;AACP;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;ECtCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAA;EAAA;EAAA;EAAA;;;;;;;;;;;;;;;;;;;;;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;;;;;;;;;;;EAAA;EAAA;;;;;AEA6E;AAC7E;AACA,CAAmC;AACnC;AACA,iDAAiD,2BAAa;AAC9D;AACA,SAAS,SAAS;AAClB;;;AAGA,oDAAe","sources":["webpack:///./.vuepress/.temp/pages/3.x/tutorial.html.js","webpack:///./.vuepress/.temp/pages/3.x/tutorial.html.vue","webpack:///./.vuepress/.temp/pages/3.x/tutorial.html.vue?241c","webpack:///./.vuepress/.temp/pages/3.x/tutorial.html.vue?f1c3"],"sourcesContent":["export const data = {\n  \"key\": \"v-2d79a950\",\n  \"path\": \"/3.x/tutorial.html\",\n  \"title\": \"快速开始\",\n  \"lang\": \"en-US\",\n  \"frontmatter\": {},\n  \"excerpt\": \"\",\n  \"headers\": [\n    {\n      \"level\": 2,\n      \"title\": \"服务端验证\",\n      \"slug\": \"服务端验证\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"接收 & 回复用户消息\",\n      \"slug\": \"接收-回复用户消息\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"总结\",\n      \"slug\": \"总结\",\n      \"children\": []\n    },\n    {\n      \"level\": 2,\n      \"title\": \"最后\",\n      \"slug\": \"最后\",\n      \"children\": []\n    }\n  ],\n  \"filePathRelative\": \"3.x/tutorial.md\",\n  \"git\": {\n    \"updatedTime\": 1629906046000,\n    \"contributors\": []\n  }\n}\n","<h1 id=\"快速开始\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#快速开始\" aria-hidden=\"true\">#</a> 快速开始</h1>\n<p>在我们已经安装完成后，即可很快的开始使用它了，当然你还是有必要明白PHP基本知识，如命名空间等，我这里就不赘述了。</p>\n<p>我们以完成服务器端验证与接收响应用户发送的消息为例来演示,首先你有必要了解一下微信交互的运行流程：</p>\n<div class=\"language-text ext-text line-numbers-mode\"><pre v-pre class=\"language-text\"><code>                                     +-----------------+                       +---------------+\n    +----------+                     |                 |    POST/GET/PUT       |               |\n    |          | ------------------> |                 | ------------------->  |               |\n    |   user   |                     |  wechat server  |                       |  your server  |\n    |          | &lt; - - - - - - - - - |                 |                       |               |\n    +----------+                     |                 | &lt;- - - - - - - - - -  |               |\n                                     +-----------------+                       +---------------+\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div></div><p>那么我们要做的就是图中 <strong>微信服务器把用户消息转到我们的自有服务器（虚线返回部分）</strong> 后的处理过程。</p>\n<h2 id=\"服务端验证\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#服务端验证\" aria-hidden=\"true\">#</a> 服务端验证</h2>\n<p>在微信接入开始有一个 “服务器验证” 的过程，这一步呢，其实就是微信服务器向我们服务器发起一个请求（上图实线部分），传了一个名称为 <code>echostr</code> 的字符串过来，我们只需要原样返回就好了。</p>\n<p>你也知道，微信后台只能填写一个服务器地址，所以 <strong>服务器验证</strong> 与 <strong>消息的接收与回复</strong>，都在这一个链接内完成交互。</p>\n<p>考虑到这些，我已经把验证这一步给封装到 SDK 里了，你可以完全忽略这一步。</p>\n<p>下面我们来配置一个基本的服务端，这里假设我们自己的服务器域名叫 <code>easywechat.org</code>，我们在服务器上准备这么一个文件<code>server.php</code>:</p>\n<p>// server.php</p>\n<div class=\"language-php ext-php line-numbers-mode\"><pre v-pre class=\"language-php\"><code><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">include</span> <span class=\"token constant\">__DIR__</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'/vendor/autoload.php'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 引入 composer 入口文件</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">EasyWeChat<span class=\"token punctuation\">\\</span>Foundation<span class=\"token punctuation\">\\</span>Application</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$options</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string single-quoted-string\">'debug'</span>  <span class=\"token operator\">=></span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string single-quoted-string\">'app_id'</span> <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">'your-app-id'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string single-quoted-string\">'secret'</span> <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">'you-secret'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string single-quoted-string\">'token'</span>  <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">'easywechat'</span><span class=\"token punctuation\">,</span>\n\n\n    <span class=\"token comment\">// 'aes_key' => null, // 可选</span>\n\n    <span class=\"token string single-quoted-string\">'log'</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string single-quoted-string\">'level'</span> <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">'debug'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string single-quoted-string\">'file'</span>  <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">'/tmp/easywechat.log'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// XXX: 绝对路径！！！！</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$app</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Application</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$options</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$app</span><span class=\"token operator\">-></span><span class=\"token property\">server</span><span class=\"token operator\">-></span><span class=\"token function\">serve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 将响应输出</span>\n<span class=\"token variable\">$response</span><span class=\"token operator\">-></span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Laravel 里请使用：return $response;</span>\n\n</span></code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br></div></div><blockquote>\n<p>❤️ 安全模式下请一定要填写 <code>aes_key</code></p>\n</blockquote>\n<p>一个服务端带验证功能的代码已经完成，当然没有对消息做处理，别着急，后面我们再讲。</p>\n<p>我们先来分析上面的代码：</p>\n<div class=\"language-php ext-php line-numbers-mode\"><pre v-pre class=\"language-php\"><code><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token comment\">// 这行代码是引入 `composer` 的入口文件，这样我们的类才能正常加载。</span>\n<span class=\"token keyword\">include</span> <span class=\"token constant\">__DIR__</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'/vendor/autoload.php'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 引入我们的主项目的入口类。</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">EasyWeChat<span class=\"token punctuation\">\\</span>Foundation<span class=\"token punctuation\">\\</span>Application</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 一些配置</span>\n<span class=\"token variable\">$options</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 使用配置来初始化一个项目。</span>\n<span class=\"token variable\">$app</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Application</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$options</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$app</span><span class=\"token operator\">-></span><span class=\"token property\">server</span><span class=\"token operator\">-></span><span class=\"token function\">serve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 将响应输出</span>\n<span class=\"token variable\">$response</span><span class=\"token operator\">-></span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Laravel 里请使用：return $response;</span>\n</span></code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br></div></div><p>最后这一行我有必要详细讲一下：</p>\n<blockquote>\n<ol>\n<li>我们的 <code>$app-&gt;server-&gt;serve()</code> 就是执行服务端业务了，那么它的返回值呢，是一个 <code>Symfony\\Component\\HttpFoundation\\Response</code> 实例。</li>\n<li>我这里是直接调用了它的 <code>send()</code> 方法，它就是直接输出了，我们在一些框架就不能直接输出了，那你就直接拿到 Response 实例后做相应的操作即可，比如 Laravel 里你就可以直接 <code>return $app-&gt;server-&gt;serve();</code></li>\n</ol>\n</blockquote>\n<p>OK, 有了上面的代码，那么请你按 <strong><a href=\"http://mp.weixin.qq.com/wiki/17/2d4265491f12608cd170a95559800f2d.html\" target=\"_blank\" rel=\"noopener noreferrer\">微信官方的接入指引<OutboundLink/></a></strong> 操作，并相应修改上面的 <code>$options</code> 的配置。</p>\n<blockquote>\n<p>URL 就是我们的 <code>http://easywechat.org/server.php</code>，这里我是举例哦，你可不要填写我的域名。</p>\n</blockquote>\n<p>这样，点击提交验证就OK了。</p>\n<blockquote>\n<p>❤️ 请一定要将微信后台的开发者模式 “<strong>启用</strong>” ！！！！！！看到红色 “<strong>停用</strong>” 才真正的是启用了。</p>\n</blockquote>\n<h2 id=\"接收-回复用户消息\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#接收-回复用户消息\" aria-hidden=\"true\">#</a> 接收 &amp; 回复用户消息</h2>\n<p>那服务端验证通过了，我们就来试一下接收消息吧。</p>\n<blockquote>\n<p>在刚刚上面代码最后一行 <code>$app-&gt;server-&gt;serve()-&gt;send();</code> 前面，我们调用 <code>$app-&gt;server</code> 的 <code>setMessageHandler()</code> 方法来注册一个消息处理函数，这里用到了 <strong><a href=\"http://php.net/manual/zh/functions.anonymous.php\" target=\"_blank\" rel=\"noopener noreferrer\">PHP 闭包<OutboundLink/></a></strong> 的知识，如果你不熟悉赶紧补课去。</p>\n</blockquote>\n<div class=\"language-php ext-php line-numbers-mode\"><pre v-pre class=\"language-php\"><code><span class=\"token comment\">// ...</span>\n\n<span class=\"token variable\">$server</span><span class=\"token operator\">-></span><span class=\"token function\">setMessageHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string double-quoted-string\">\"您好！欢迎关注我!\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$app</span><span class=\"token operator\">-></span><span class=\"token property\">server</span><span class=\"token operator\">-></span><span class=\"token function\">serve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 将响应输出</span>\n<span class=\"token variable\">$response</span><span class=\"token operator\">-></span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Laravel 里请使用：return $response;</span>\n\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div></div><blockquote>\n<p>注意：send() 方法里已经包含 echo 了，请不要再加 echo 在前面。</p>\n</blockquote>\n<p>好吧，打开你的微信客户端，向你的公众号发送任意一条消息，你应该会收到回复：<code>您好！欢迎关注我!</code>。</p>\n<blockquote>\n<p>没有收到回复？看到了“你的公众号暂时无法提供服务” ？， 好，那检查一下你的日志吧，日志在哪儿？我们的配置里写了日志路径了(<code>'/tmp/easywechat.log'</code>)。 没有这个文件？看看权限哦。</p>\n</blockquote>\n<p>一个基本的服务端验证就完成了。</p>\n<h2 id=\"总结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#总结\" aria-hidden=\"true\">#</a> 总结</h2>\n<ol>\n<li>所有的服务都通过主入口 <code>EasyWeChat\\Foundation\\Application</code> 类来获取：</li>\n</ol>\n<div class=\"language-php ext-php line-numbers-mode\"><pre v-pre class=\"language-php\"><code><span class=\"token variable\">$app</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Application</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$options</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// services...</span>\n<span class=\"token variable\">$server</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$app</span><span class=\"token operator\">-></span><span class=\"token property\">server</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$user</span>   <span class=\"token operator\">=</span> <span class=\"token variable\">$app</span><span class=\"token operator\">-></span><span class=\"token property\">user</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$oauth</span>  <span class=\"token operator\">=</span> <span class=\"token variable\">$app</span><span class=\"token operator\">-></span><span class=\"token property\">oauth</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ... js/menu/staff/material/qrcode/notice/stats...</span>\n\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div></div><ol start=\"2\">\n<li>所有的 API 返回值均为 <a href=\"https://github.com/EasyWeChat/support/blob/master/src/Collection.php\" target=\"_blank\" rel=\"noopener noreferrer\"><code>EasyWeChat\\Support\\Collection</code><OutboundLink/></a> 类，这个类是个什么东西呢？</li>\n</ol>\n<p>它实现了一些 <strong><a href=\"http://php.net/manual/zh/reserved.interfaces.php\" target=\"_blank\" rel=\"noopener noreferrer\">PHP预定义接口<OutboundLink/></a></strong>，比如：<a href=\"http://php.net/manual/zh/class.arrayaccess.php\" target=\"_blank\" rel=\"noopener noreferrer\"><code>ArrayAccess</code><OutboundLink/></a>、<a href=\"http://php.net/manual/zh/class.serializable.php\" target=\"_blank\" rel=\"noopener noreferrer\"><code>Serializable</code><OutboundLink/></a> 等。</p>\n<p>有啥好处呢？它让我们操作起返回值来更方便，比如：</p>\n<div class=\"language-php ext-php line-numbers-mode\"><pre v-pre class=\"language-php\"><code><span class=\"token variable\">$userService</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$app</span><span class=\"token operator\">-></span><span class=\"token property\">user</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 用户API</span>\n\n<span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$userService</span><span class=\"token operator\">-></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$openId</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// $user 便是一个 EasyWeChat\\Support\\Collection 实例</span>\n<span class=\"token variable\">$user</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'nickname'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$user</span><span class=\"token operator\">-></span><span class=\"token property\">nickname</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$user</span><span class=\"token operator\">-></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'nickname'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//...</span>\n</code></pre><div class=\"line-numbers\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br></div></div><p>还有这些方便的操作：检查是否存在某个属性 <code>$user-&gt;has('email')</code>、元素个数 <code>$user-&gt;count()</code>，还有返回数组 <code>$user-&gt;toArray()</code> ，生成 JSON <code>$user-&gt;toJSON()</code> 等。</p>\n<h2 id=\"最后\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#最后\" aria-hidden=\"true\">#</a> 最后</h2>\n<p>希望你在使用本 SDK 的时候能忘记微信官方给你的痛苦，同时如果你发现 SDK 的不足，欢迎提交 PR 或者给我<a href=\"https://github.com/overtrue/wechat/issues\" target=\"_blank\" rel=\"noopener noreferrer\">提建议 &amp; 报告问题<OutboundLink/></a>。</p>\n<p>祝你生活愉快！</p>\n","export * from \"-!../../../../node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[1]!../../../../node_modules/@vuepress/bundler-webpack/lib/build/ssr/vuepressLoader.js!../../../../node_modules/vue-loader/dist/index.js??ruleSet[0].use[1]!./tutorial.html.vue?vue&type=template&id=7c4d3325\"","import { ssrRender } from \"./tutorial.html.vue?vue&type=template&id=7c4d3325\"\nconst script = {}\nimport { ssrContextKey } from 'vue'\nscript.ssrRender = (...args) => {\n  const ssrContext = args[2].appContext.provides[ssrContextKey]\n  ssrContext._registeredComponents.add(\"/home/runner/work/easywechat/easywechat/docs/node_modules/@vuepress/bundler-webpack/lib/build/ssr/vuepressLoader.js!/home/runner/work/easywechat/easywechat/docs/node_modules/vue-loader/dist/index.js??ruleSet[0].use[1]!/home/runner/work/easywechat/easywechat/docs/.vuepress/.temp/pages/3.x/tutorial.html.vue\")\n  return ssrRender(...args)\n}\n\n\nexport default script"],"names":[],"sourceRoot":""}